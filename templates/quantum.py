# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16qwUey1VWJWLmw4Dl-sFJsH-1t1E-JZi
"""


from flask import Blueprint, request, jsonify
import qiskit
import numpy as np
from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit.quantum_info import partial_trace, Statevector
from qiskit import Aer, execute
from matplotlib import pyplot as plt
from flask import Flask, render_template

quantum_route = Blueprint("quantum_route", __name__, template_folder='templates')

@quantum_route.route('/', methods=['GET','POST'])
def index():
  qc = QuantumCircuit(6,1)
  qc.draw(output="mpl")
  plt.savefig("static/images/circuit.png")
  return render_template('index.html')    

numQubits = 6
qc = QuantumCircuit(6,1)
superpositions = {}


@quantum_route.route('/initializeQubit', methods=['GET','POST'])
def start():

  ind = -1
  if not request.json is None:
    ind = request.json['params']['qubitIndex']
    qc.h(ind)
    qc.draw(output="mpl")
    plt.savefig("static/images/circuit.png")

  return "qubit initialized "+str(ind)

@quantum_route.route('/measureQubit', methods=['GET','POST'])
def measure():
  ind = -1
  if not request.json is None:
    ind = request.json['params']['qubitIndex']
    res = str(measure(ind))
    print(res)

    qc.draw(output="mpl")
    plt.savefig("static/images/circuit.png")

    return res
  return "no measurement"

@quantum_route.route('/applyGate', methods=['GET','POST'])
def applyGate():
  ind = -1
  if not request.json is None:
    ind = request.json['params']['qubitIndex']
    gateID = request.json['params']['gateID']

    if(gateID==0):
      qc.x(ind)
    elif(gateID==1):
      qc.z(ind)
    elif(gateID==2):
      qc.h(ind)
    
    qc.draw(output="mpl")
    plt.savefig("static/images/circuit.png")
    return "applied gate"

  return "no input"

@quantum_route.route('/cnot', methods=['GET','POST'])
def cnot():
  if not request.json is None:

    control = request.json['params']['controlIndex']
    target = request.json['params']['targetIndex']

    qc.cnot(control,target)
    
    qc.draw(output="mpl")
    plt.savefig("static/images/circuit.png")
    return "applied cnot gate"

  return "no input"

#@quantum_route.route('/quantumReturn', methods=['GET','POST'])
#def value():
  #print("cell number from python:", quibitID)
  #return "qubit received"


def cnot(control,target):
  if control in superpositions or target in superpositions:
    print("error, can only entangle 2 qubits")
  else:
    qc.cnot(control,target)
    superpositions[control] = target
    superpositions[target] = control

def measure(index):
  qc.measure(index, 0)

  backend = Aer.get_backend('qasm_simulator')
  job = execute(qc,backend, shots=1024, memory=True)
  result = job.result()
  result_string = result.get_counts()
  print(result_string)

  if index in superpositions:
    superpositions.pop(superpositions[index])
    superpositions.pop(index)

  if not '1' in result_string:
    qc.barrier(index)
    return 0
  
  if not '0' in result_string:
    qc.x(index)
    qc.barrier(index)
    return 1

  if result_string['0']>=result_string['1']:
    qc.barrier(index)
    return 0
  else:
    qc.x(index)
    qc.barrier(index)
    return 1



